{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Write a LEX and YACC specification files for a small calculator that can add and subtract numbers\
LEX Specification File (
\f1 calc.l
\f0 )\
%\{\
#include "y.tab.h"  // Include the header generated by YACC\
%\}\
\
// Define regular expressions and token mapping\
%%\
\
[0-9]+     \{ yylval = atoi(yytext); return NUMBER; \}  // Match integer numbers\
[\\t ]+     ;  // Ignore whitespace\
\\n         \{ return '\\n'; \}  // Handle newlines\
\\+         \{ return '+'; \}  // Return plus symbol\
\\-         \{ return '-'; \}  // Return minus symbol\
.          \{ printf("Invalid character: %s\\n", yytext); \}\
\
%%\
\
int yywrap() \{\
    return 1;  // Signal end of input\
\}\
\
\
YACC Specification File (
\f1 calc.y
\f0 )\
\
%\{\
#include <stdio.h>\
#include <stdlib.h>\
\
// Function prototypes\
void yyerror(const char *msg);\
int yylex();\
%\}\
\
// Define token types\
%token NUMBER\
\
%%\
\
// Grammar rules for addition and subtraction\
expr: expr '+' term \{ $$ = $1 + $3; \}\
    | expr '-' term \{ $$ = $1 - $3; \}\
    | term          \{ $$ = $1; \}\
    ;\
\
term: NUMBER \{ $$ = $1; \}\
    ;\
\
%%\
\
// Main function to parse input\
int main() \{\
    printf("Enter an arithmetic expression (e.g., 5+3-2):\\n");\
    yyparse();\
    return 0;\
\}\
\
// Error handling function\
void yyerror(const char *msg) \{\
    fprintf(stderr, "Error: %s\\n", msg);\
\}\
}